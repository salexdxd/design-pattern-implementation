{"ast":null,"code":"//ImplComponent\n//leaves (developers)\nclass Developer {\n  constructor(name) {\n    this.name = void 0;\n    this.referenceToParent = void 0;\n    this.name = name;\n  }\n\n  seniority(seniority) {\n    console.log(`${seniority} x ${this.name}`);\n  }\n\n  detach() {\n    // detaching this leaf from its parent composite\n    if (this.referenceToParent) {\n      this.referenceToParent.delete(this);\n    }\n\n    ;\n  }\n\n} //composite that can contain leaves and composites (company)\n\n\nclass Company {\n  constructor(name) {\n    this.referenceToParent = void 0;\n    this.name = void 0;\n    this.components = void 0;\n    this.name = name;\n    this.components = [];\n  }\n\n  seniority(seniority) {\n    // detach leaf / composite from any current parent reference and\n    // then set the parent reference to this composite\n    console.log(`${seniority} x ${this.name}`);\n    this.components.forEach(component => {\n      component.seniority(seniority + \"\");\n    });\n  }\n\n  attach(component) {\n    component.detach();\n    component.referenceToParent = this;\n    this.components.push(component);\n  }\n\n  delete(component) {\n    // removes leaf/composite from this composite this.components\n    const index = this.components.indexOf(component);\n\n    if (index > -1) {\n      this.components.splice(index, 1);\n    }\n  }\n\n  detach() {\n    // detaching this composite from its parent composite\n    if (this.referenceToParent) {\n      this.referenceToParent.delete(this);\n      this.referenceToParent = undefined;\n    }\n  }\n\n}\n\nconst myCompany = new Company(\"Company 1\");\nconst myDev1 = new Developer(\"Dev1\");\nconst myDev2 = new Developer(\"Dev2\"); // console.log(myCompany);\n\nmyCompany.attach(myDev1); // console.log(myCompany);\n\nmyCompany.attach(myDev2); // console.log(myCompany);\n\nconst myCompanyA = new Company(\"Company 2\");\nmyCompany.attach(myCompanyA); // console.log(myCompany);\n\nconst myDev3 = new Developer(\"Dev3\");\nmyCompanyA.attach(myDev3); // console.log(myCompany);\n// console.log(myCompanyA);\n\nconst myCompanyB = new Company(\"Company 3\");\nconst myDev4 = new Developer(\"Dev4\");\nmyCompanyB.attach(myDev4);\nmyCompany.attach(myCompanyB);\nmyCompany.seniority(''); // console.log();\n\nmyCompanyB.attach(myCompanyA); // myCompany.seniority(\"\");\n\nexport {};","map":{"version":3,"names":["Developer","constructor","name","referenceToParent","seniority","console","log","detach","delete","Company","components","forEach","component","attach","push","index","indexOf","splice","undefined","myCompany","myDev1","myDev2","myCompanyA","myDev3","myCompanyB","myDev4"],"sources":["C:/Users/amastilovic/Desktop/NOTES/week5/day2 - design patterns/react-design-patterns/factory/design-pattern-implementation/src/composite.ts"],"sourcesContent":["//ImplComponent\r\ninterface ImplComponent{\r\n\r\n    referenceToParent?:Company;\r\n\r\n    //a method each leaf and composite container should implement\r\n    seniority(seniority:string):void;\r\n\r\n    //called before a leaf is attached to a composite\r\n    detach():void;\r\n    \r\n}\r\n\r\n\r\n//leaves (developers)\r\nclass Developer implements ImplComponent{\r\n    name:string;\r\n    referenceToParent?: Company | undefined;\r\n\r\n    constructor(name:string){\r\n        this.name=name;\r\n    }\r\n\r\n\r\n\r\n    seniority(seniority: string): void {\r\n        console.log(`${seniority} x ${this.name}`);\r\n    }\r\n    detach(): void {\r\n        // detaching this leaf from its parent composite\r\n        if(this.referenceToParent){\r\n            this.referenceToParent.delete(this);\r\n        };\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//composite that can contain leaves and composites (company)\r\nclass Company implements ImplComponent{\r\n    referenceToParent?: Company | undefined;\r\n    name:string;\r\n    components:ImplComponent[];\r\n\r\n    constructor(name:string){\r\n        this.name=name;\r\n        this.components = [];\r\n    }\r\n\r\n\r\n    seniority(seniority: string): void {\r\n        // detach leaf / composite from any current parent reference and\r\n        // then set the parent reference to this composite\r\n        console.log(`${seniority} x ${this.name}`);\r\n        this.components.forEach((component) => {\r\n            component.seniority(seniority+\"\");\r\n        })\r\n    }\r\n\r\n    attach(component: ImplComponent):void{\r\n        component.detach();\r\n        component.referenceToParent = this;\r\n        this.components.push(component);\r\n    }\r\n\r\n    delete(component: ImplComponent):void{\r\n        // removes leaf/composite from this composite this.components\r\n        const index = this.components.indexOf(component);\r\n        if(index>-1){\r\n            this.components.splice(index,1);\r\n        }\r\n    }    \r\n\r\n    detach(): void {\r\n        // detaching this composite from its parent composite\r\n        if(this.referenceToParent){\r\n            this.referenceToParent.delete(this);\r\n            this.referenceToParent = undefined;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst myCompany = new Company(\"Company 1\");\r\nconst myDev1 = new Developer(\"Dev1\");\r\nconst myDev2 = new Developer(\"Dev2\");\r\n// console.log(myCompany);\r\nmyCompany.attach(myDev1);\r\n// console.log(myCompany);\r\nmyCompany.attach(myDev2);\r\n// console.log(myCompany);\r\n\r\n\r\nconst myCompanyA = new Company(\"Company 2\");\r\nmyCompany.attach(myCompanyA);\r\n// console.log(myCompany);\r\n\r\nconst myDev3 = new Developer(\"Dev3\");\r\nmyCompanyA.attach(myDev3);\r\n\r\n// console.log(myCompany);\r\n// console.log(myCompanyA);\r\nconst myCompanyB = new Company(\"Company 3\");\r\nconst myDev4 = new Developer(\"Dev4\");\r\nmyCompanyB.attach(myDev4);\r\nmyCompany.attach(myCompanyB);\r\nmyCompany.seniority('');\r\n\r\n\r\n// console.log();\r\nmyCompanyB.attach(myCompanyA);\r\n// myCompany.seniority(\"\");\r\n\r\n\r\n\r\n\r\n\r\nexport {};"],"mappings":"AAAA;AAcA;AACA,MAAMA,SAAN,CAAwC;EAIpCC,WAAW,CAACC,IAAD,EAAa;IAAA,KAHxBA,IAGwB;IAAA,KAFxBC,iBAEwB;IACpB,KAAKD,IAAL,GAAUA,IAAV;EACH;;EAIDE,SAAS,CAACA,SAAD,EAA0B;IAC/BC,OAAO,CAACC,GAAR,CAAa,GAAEF,SAAU,MAAK,KAAKF,IAAK,EAAxC;EACH;;EACDK,MAAM,GAAS;IACX;IACA,IAAG,KAAKJ,iBAAR,EAA0B;MACtB,KAAKA,iBAAL,CAAuBK,MAAvB,CAA8B,IAA9B;IACH;;IAAA;EACJ;;AAlBmC,C,CAyBxC;;;AACA,MAAMC,OAAN,CAAsC;EAKlCR,WAAW,CAACC,IAAD,EAAa;IAAA,KAJxBC,iBAIwB;IAAA,KAHxBD,IAGwB;IAAA,KAFxBQ,UAEwB;IACpB,KAAKR,IAAL,GAAUA,IAAV;IACA,KAAKQ,UAAL,GAAkB,EAAlB;EACH;;EAGDN,SAAS,CAACA,SAAD,EAA0B;IAC/B;IACA;IACAC,OAAO,CAACC,GAAR,CAAa,GAAEF,SAAU,MAAK,KAAKF,IAAK,EAAxC;IACA,KAAKQ,UAAL,CAAgBC,OAAhB,CAAyBC,SAAD,IAAe;MACnCA,SAAS,CAACR,SAAV,CAAoBA,SAAS,GAAC,EAA9B;IACH,CAFD;EAGH;;EAEDS,MAAM,CAACD,SAAD,EAA+B;IACjCA,SAAS,CAACL,MAAV;IACAK,SAAS,CAACT,iBAAV,GAA8B,IAA9B;IACA,KAAKO,UAAL,CAAgBI,IAAhB,CAAqBF,SAArB;EACH;;EAEDJ,MAAM,CAACI,SAAD,EAA+B;IACjC;IACA,MAAMG,KAAK,GAAG,KAAKL,UAAL,CAAgBM,OAAhB,CAAwBJ,SAAxB,CAAd;;IACA,IAAGG,KAAK,GAAC,CAAC,CAAV,EAAY;MACR,KAAKL,UAAL,CAAgBO,MAAhB,CAAuBF,KAAvB,EAA6B,CAA7B;IACH;EACJ;;EAEDR,MAAM,GAAS;IACX;IACA,IAAG,KAAKJ,iBAAR,EAA0B;MACtB,KAAKA,iBAAL,CAAuBK,MAAvB,CAA8B,IAA9B;MACA,KAAKL,iBAAL,GAAyBe,SAAzB;IACH;EACJ;;AAxCiC;;AA4CtC,MAAMC,SAAS,GAAG,IAAIV,OAAJ,CAAY,WAAZ,CAAlB;AACA,MAAMW,MAAM,GAAG,IAAIpB,SAAJ,CAAc,MAAd,CAAf;AACA,MAAMqB,MAAM,GAAG,IAAIrB,SAAJ,CAAc,MAAd,CAAf,C,CACA;;AACAmB,SAAS,CAACN,MAAV,CAAiBO,MAAjB,E,CACA;;AACAD,SAAS,CAACN,MAAV,CAAiBQ,MAAjB,E,CACA;;AAGA,MAAMC,UAAU,GAAG,IAAIb,OAAJ,CAAY,WAAZ,CAAnB;AACAU,SAAS,CAACN,MAAV,CAAiBS,UAAjB,E,CACA;;AAEA,MAAMC,MAAM,GAAG,IAAIvB,SAAJ,CAAc,MAAd,CAAf;AACAsB,UAAU,CAACT,MAAX,CAAkBU,MAAlB,E,CAEA;AACA;;AACA,MAAMC,UAAU,GAAG,IAAIf,OAAJ,CAAY,WAAZ,CAAnB;AACA,MAAMgB,MAAM,GAAG,IAAIzB,SAAJ,CAAc,MAAd,CAAf;AACAwB,UAAU,CAACX,MAAX,CAAkBY,MAAlB;AACAN,SAAS,CAACN,MAAV,CAAiBW,UAAjB;AACAL,SAAS,CAACf,SAAV,CAAoB,EAApB,E,CAGA;;AACAoB,UAAU,CAACX,MAAX,CAAkBS,UAAlB,E,CACA;;AAMA"},"metadata":{},"sourceType":"module"}