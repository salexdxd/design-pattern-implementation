{"ast":null,"code":"//subject interface (declares -> subscribe(), unsubscribe(), notify())\n//concrete subject (implements -> subscribe(), unsubscribe(), notify())\nclass Subject {\n  constructor() {\n    this.observers = void 0;\n    this.observers = new Set();\n  }\n\n  subscribe(observer) {\n    this.observers.add(observer);\n  }\n\n  unsubscribe(observer) {\n    this.observers.delete(observer);\n  }\n\n  notify() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this.observers.forEach(observer => {\n      observer.notify(...args); // console.log(\"notified\");\n    });\n  }\n\n} //observer interface (declares -> notify())\n\n\nlet COUNTER = 0; //concrete observer (implements -> notify())\n\nclass Observer {\n  constructor(observable) {\n    this.id = void 0;\n    this.id = ++COUNTER;\n  }\n\n  notify() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    console.log(`observer with id ${this.id} received: ${JSON.stringify(args)}`);\n  }\n\n}\n\nconst mySubject = new Subject();\nconst myObserver1 = new Observer(mySubject);\nconst myObserver2 = new Observer(mySubject);\nconst myObserver3 = new Observer(mySubject);\nconst myObserver4 = new Observer(mySubject);\nconst myObserver5 = new Observer(mySubject);\nconst myObserver6 = new Observer(mySubject);\nmySubject.subscribe(myObserver1);\nmySubject.subscribe(myObserver2);\nmySubject.subscribe(myObserver3);\nmySubject.subscribe(myObserver4);\nmySubject.subscribe(myObserver5);\nmySubject.subscribe(myObserver6);\nmySubject.notify('first notification', [1, 2, 3]); // myObserver1.notify('asd');\n\nconsole.log(\"------------------------------------------------\");\nmySubject.unsubscribe(myObserver2);\nmySubject.notify(\"after unsubscribing obs2\", [1, 4, 5]);\nexport {};","map":{"version":3,"names":["Subject","constructor","observers","Set","subscribe","observer","add","unsubscribe","delete","notify","args","forEach","COUNTER","Observer","observable","id","console","log","JSON","stringify","mySubject","myObserver1","myObserver2","myObserver3","myObserver4","myObserver5","myObserver6"],"sources":["C:/Users/amastilovic/Desktop/NOTES/week5/day2 - design patterns/react-design-patterns/factory/design-pattern-implementation/src/observer/observer.ts"],"sourcesContent":["//subject interface (declares -> subscribe(), unsubscribe(), notify())\r\ninterface ImplObservable {\r\n    // subscribe method\r\n    subscribe(observer:ImplObservable):void;\r\n    // unsubscribe method\r\n    unsubscribe(observer:ImplObservable):void;\r\n    // notify method\r\n    notify(...args: unknown[]):void;\r\n}\r\n\r\n//concrete subject (implements -> subscribe(), unsubscribe(), notify())\r\nclass Subject implements ImplObservable{\r\n\r\n    observers:Set<ImplObserver>;\r\n    \r\n    constructor(){\r\n        this.observers = new Set();\r\n    }\r\n\r\n    subscribe(observer: ImplObserver): void {\r\n        this.observers.add(observer);\r\n    }\r\n\r\n    unsubscribe(observer: ImplObserver): void {\r\n        this.observers.delete(observer);\r\n    }\r\n\r\n    notify(...args: unknown[]): void {\r\n        this.observers.forEach((observer)=>{\r\n            observer.notify(...args);\r\n            // console.log(\"notified\");\r\n        });\r\n    }\r\n    \r\n}\r\n\r\n//observer interface (declares -> notify())\r\ninterface ImplObserver{\r\n    // receive notification\r\n    notify(...args:unknown[]):void;\r\n}\r\n\r\nlet COUNTER = 0;\r\n//concrete observer (implements -> notify())\r\nclass Observer implements ImplObserver {\r\n    id:number;\r\n\r\n    constructor(observable:ImplObservable){\r\n        this.id= ++COUNTER;\r\n    }\r\n\r\n    notify(...args: unknown[]): void {\r\n        console.log(`observer with id ${this.id} received: ${JSON.stringify(args)}`);\r\n    }\r\n}\r\n\r\nconst mySubject = new Subject();\r\nconst myObserver1 = new Observer(mySubject);\r\nconst myObserver2 = new Observer(mySubject);\r\nconst myObserver3 = new Observer(mySubject);\r\nconst myObserver4 = new Observer(mySubject);\r\nconst myObserver5 = new Observer(mySubject);\r\nconst myObserver6 = new Observer(mySubject);\r\n\r\nmySubject.subscribe(myObserver1);\r\nmySubject.subscribe(myObserver2);\r\nmySubject.subscribe(myObserver3);\r\nmySubject.subscribe(myObserver4);\r\nmySubject.subscribe(myObserver5);\r\nmySubject.subscribe(myObserver6);\r\n\r\nmySubject.notify('first notification', [1,2,3]);\r\n// myObserver1.notify('asd');\r\nconsole.log(\"------------------------------------------------\")\r\nmySubject.unsubscribe(myObserver2);\r\n\r\nmySubject.notify(\"after unsubscribing obs2\", [1,4,5]);\r\n\r\n\r\n\r\nexport {};"],"mappings":"AAAA;AAUA;AACA,MAAMA,OAAN,CAAuC;EAInCC,WAAW,GAAE;IAAA,KAFbC,SAEa;IACT,KAAKA,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;EACH;;EAEDC,SAAS,CAACC,QAAD,EAA+B;IACpC,KAAKH,SAAL,CAAeI,GAAf,CAAmBD,QAAnB;EACH;;EAEDE,WAAW,CAACF,QAAD,EAA+B;IACtC,KAAKH,SAAL,CAAeM,MAAf,CAAsBH,QAAtB;EACH;;EAEDI,MAAM,GAA2B;IAAA,kCAAvBC,IAAuB;MAAvBA,IAAuB;IAAA;;IAC7B,KAAKR,SAAL,CAAeS,OAAf,CAAwBN,QAAD,IAAY;MAC/BA,QAAQ,CAACI,MAAT,CAAgB,GAAGC,IAAnB,EAD+B,CAE/B;IACH,CAHD;EAIH;;AArBkC,C,CAyBvC;;;AAMA,IAAIE,OAAO,GAAG,CAAd,C,CACA;;AACA,MAAMC,QAAN,CAAuC;EAGnCZ,WAAW,CAACa,UAAD,EAA2B;IAAA,KAFtCC,EAEsC;IAClC,KAAKA,EAAL,GAAS,EAAEH,OAAX;EACH;;EAEDH,MAAM,GAA2B;IAAA,mCAAvBC,IAAuB;MAAvBA,IAAuB;IAAA;;IAC7BM,OAAO,CAACC,GAAR,CAAa,oBAAmB,KAAKF,EAAG,cAAaG,IAAI,CAACC,SAAL,CAAeT,IAAf,CAAqB,EAA1E;EACH;;AATkC;;AAYvC,MAAMU,SAAS,GAAG,IAAIpB,OAAJ,EAAlB;AACA,MAAMqB,WAAW,GAAG,IAAIR,QAAJ,CAAaO,SAAb,CAApB;AACA,MAAME,WAAW,GAAG,IAAIT,QAAJ,CAAaO,SAAb,CAApB;AACA,MAAMG,WAAW,GAAG,IAAIV,QAAJ,CAAaO,SAAb,CAApB;AACA,MAAMI,WAAW,GAAG,IAAIX,QAAJ,CAAaO,SAAb,CAApB;AACA,MAAMK,WAAW,GAAG,IAAIZ,QAAJ,CAAaO,SAAb,CAApB;AACA,MAAMM,WAAW,GAAG,IAAIb,QAAJ,CAAaO,SAAb,CAApB;AAEAA,SAAS,CAAChB,SAAV,CAAoBiB,WAApB;AACAD,SAAS,CAAChB,SAAV,CAAoBkB,WAApB;AACAF,SAAS,CAAChB,SAAV,CAAoBmB,WAApB;AACAH,SAAS,CAAChB,SAAV,CAAoBoB,WAApB;AACAJ,SAAS,CAAChB,SAAV,CAAoBqB,WAApB;AACAL,SAAS,CAAChB,SAAV,CAAoBsB,WAApB;AAEAN,SAAS,CAACX,MAAV,CAAiB,oBAAjB,EAAuC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAvC,E,CACA;;AACAO,OAAO,CAACC,GAAR,CAAY,kDAAZ;AACAG,SAAS,CAACb,WAAV,CAAsBe,WAAtB;AAEAF,SAAS,CAACX,MAAV,CAAiB,0BAAjB,EAA6C,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAA7C;AAIA"},"metadata":{},"sourceType":"module"}