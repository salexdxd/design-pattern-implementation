{"ast":null,"code":"//component implementation\nclass Mediator {\n  constructor() {\n    this.components = void 0;\n    this.components = new Set();\n  }\n\n  add(component) {\n    // adding components\n    this.components.add(component);\n  }\n\n  notify(message, originator) {\n    this.components.forEach(component => {\n      if (component != originator) {\n        component.receive(message);\n      }\n    });\n  }\n\n}\n\nclass Component {\n  constructor(mediator, name) {\n    this.mediator = void 0;\n    this.name = void 0;\n    this.mediator = mediator;\n    this.name = name;\n  }\n\n  notify(message) {\n    console.log(this.name + \" out \" + message);\n    this.mediator.notify(message, this);\n  }\n\n  receive(message) {\n    console.log(this.name + \" in \" + message);\n  }\n\n}\n\nconst myMediator = new Mediator();\nconst myComponent1 = new Component(myMediator, \"Component1\");\nconst myComponent2 = new Component(myMediator, \"Component2\");\nconst myComponent3 = new Component(myMediator, \"Component3\");\nmyMediator.add(myComponent1);\nmyMediator.add(myComponent2);\nmyMediator.add(myComponent3);\nconsole.log(\"--------------------------------------------------------------------\");\nconsole.log(myMediator);\nconsole.log(\"--------------------------------------------------------------------\");\nmyComponent1.notify(\"comp1 notification\");\nconsole.log(\"--------------------------------------------------------------------\");\nmyComponent2.notify(\"comp2 notification\");\nconsole.log(\"--------------------------------------------------------------------\");\nmyComponent3.notify(\"comp3 notification\");\nexport {};","map":{"version":3,"names":["Mediator","constructor","components","Set","add","component","notify","message","originator","forEach","receive","Component","mediator","name","console","log","myMediator","myComponent1","myComponent2","myComponent3"],"sources":["C:/Users/amastilovic/Desktop/NOTES/week5/day2 - design patterns/react-design-patterns/factory/design-pattern-implementation/src/mediator.ts"],"sourcesContent":["//component implementation\r\ninterface ImplComponent{\r\n    notify(message:string):void;\r\n    receive(message:string):void;\r\n}\r\n\r\nclass Mediator{\r\n    components: Set<ImplComponent>;\r\n\r\n    constructor(){\r\n        this.components=new Set();\r\n    }\r\n\r\n    add(component:ImplComponent):void{\r\n        // adding components\r\n        this.components.add(component);\r\n    }\r\n\r\n    notify(message:string, originator:ImplComponent):void{\r\n        this.components.forEach((component)=>{\r\n            if(component!=originator){\r\n                component.receive(message);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nclass Component implements ImplComponent{\r\n\r\n    mediator: Mediator;\r\n    name:string;\r\n\r\n    constructor(mediator:Mediator, name:string){\r\n        this.mediator = mediator;\r\n        this.name=name;\r\n    }\r\n\r\n\r\n\r\n    notify(message: string): void {\r\n        console.log(this.name+\" out \"+message);\r\n        this.mediator.notify(message, this);\r\n    }\r\n    receive(message: string): void {\r\n        console.log(this.name+\" in \"+message);\r\n    }\r\n    \r\n}\r\n\r\nconst myMediator = new Mediator();\r\nconst myComponent1 = new Component(myMediator, \"Component1\");\r\nconst myComponent2 = new Component(myMediator, \"Component2\");\r\nconst myComponent3 = new Component(myMediator, \"Component3\");\r\n\r\nmyMediator.add(myComponent1);\r\nmyMediator.add(myComponent2);\r\nmyMediator.add(myComponent3);\r\nconsole.log(\"--------------------------------------------------------------------\");\r\nconsole.log(myMediator);\r\nconsole.log(\"--------------------------------------------------------------------\");\r\nmyComponent1.notify(\"comp1 notification\");\r\nconsole.log(\"--------------------------------------------------------------------\");\r\nmyComponent2.notify(\"comp2 notification\");\r\nconsole.log(\"--------------------------------------------------------------------\");\r\nmyComponent3.notify(\"comp3 notification\");\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport {};"],"mappings":"AAAA;AAMA,MAAMA,QAAN,CAAc;EAGVC,WAAW,GAAE;IAAA,KAFbC,UAEa;IACT,KAAKA,UAAL,GAAgB,IAAIC,GAAJ,EAAhB;EACH;;EAEDC,GAAG,CAACC,SAAD,EAA8B;IAC7B;IACA,KAAKH,UAAL,CAAgBE,GAAhB,CAAoBC,SAApB;EACH;;EAEDC,MAAM,CAACC,OAAD,EAAiBC,UAAjB,EAA+C;IACjD,KAAKN,UAAL,CAAgBO,OAAhB,CAAyBJ,SAAD,IAAa;MACjC,IAAGA,SAAS,IAAEG,UAAd,EAAyB;QACrBH,SAAS,CAACK,OAAV,CAAkBH,OAAlB;MACH;IACJ,CAJD;EAKH;;AAlBS;;AAqBd,MAAMI,SAAN,CAAwC;EAKpCV,WAAW,CAACW,QAAD,EAAoBC,IAApB,EAAgC;IAAA,KAH3CD,QAG2C;IAAA,KAF3CC,IAE2C;IACvC,KAAKD,QAAL,GAAgBA,QAAhB;IACA,KAAKC,IAAL,GAAUA,IAAV;EACH;;EAIDP,MAAM,CAACC,OAAD,EAAwB;IAC1BO,OAAO,CAACC,GAAR,CAAY,KAAKF,IAAL,GAAU,OAAV,GAAkBN,OAA9B;IACA,KAAKK,QAAL,CAAcN,MAAd,CAAqBC,OAArB,EAA8B,IAA9B;EACH;;EACDG,OAAO,CAACH,OAAD,EAAwB;IAC3BO,OAAO,CAACC,GAAR,CAAY,KAAKF,IAAL,GAAU,MAAV,GAAiBN,OAA7B;EACH;;AAlBmC;;AAsBxC,MAAMS,UAAU,GAAG,IAAIhB,QAAJ,EAAnB;AACA,MAAMiB,YAAY,GAAG,IAAIN,SAAJ,CAAcK,UAAd,EAA0B,YAA1B,CAArB;AACA,MAAME,YAAY,GAAG,IAAIP,SAAJ,CAAcK,UAAd,EAA0B,YAA1B,CAArB;AACA,MAAMG,YAAY,GAAG,IAAIR,SAAJ,CAAcK,UAAd,EAA0B,YAA1B,CAArB;AAEAA,UAAU,CAACZ,GAAX,CAAea,YAAf;AACAD,UAAU,CAACZ,GAAX,CAAec,YAAf;AACAF,UAAU,CAACZ,GAAX,CAAee,YAAf;AACAL,OAAO,CAACC,GAAR,CAAY,sEAAZ;AACAD,OAAO,CAACC,GAAR,CAAYC,UAAZ;AACAF,OAAO,CAACC,GAAR,CAAY,sEAAZ;AACAE,YAAY,CAACX,MAAb,CAAoB,oBAApB;AACAQ,OAAO,CAACC,GAAR,CAAY,sEAAZ;AACAG,YAAY,CAACZ,MAAb,CAAoB,oBAApB;AACAQ,OAAO,CAACC,GAAR,CAAY,sEAAZ;AACAI,YAAY,CAACb,MAAb,CAAoB,oBAApB;AAOA"},"metadata":{},"sourceType":"module"}